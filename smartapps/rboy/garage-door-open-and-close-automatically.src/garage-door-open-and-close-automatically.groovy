/* **DISCLAIMER**
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
 * 1. the software will meet your requirements or expectations;
 * 2. the software or the software content will be free of bugs, errors, viruses or other defects;
 * 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
 * 4. the software will be compatible with third party software;
 * 5. any errors in the software will be corrected.
 * The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
 */ 
 
/**
 *  Garage Door Open and Close
 *
 *  Copyright RBoy
 *  Redistribution of any changes or code is not allowed without permission
 *
 *  Updated 2015-2-2 - Initial release
 *
 */
definition(
    name: "Garage Door Open and Close Automatically",
    namespace: "rboy",
    author: "RBoy",
    description: "Open a garage door when someone arrives, Close a garage door when someone leaves",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Meta/garage_contact.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Meta/garage_contact@2x.png")


preferences {
	section("Garage door(s)") {
		input "doors", "capability.doorControl", title: "Select the garage door controller(s)?", required: true, multiple: true
	}
	section("Close when someone leaves") {
		input "leaves", "capability.presenceSensor", title: "Who leaves", description: "Which people leave?", multiple: true, required: false
	}
	section("Open when someone arrives") {
		input "arrives", "capability.presenceSensor", title: "Who arrives", description: "Which people arrive?", multiple: true, required: false
	}
   	section("Turn on light(s)...") {
		input "switches", "capability.switch", multiple: true, title: "Select Lights", required: false 
	}
	section("Then turn them off after..."){
		input "minutes1", "number", title: "Minutes?", defaultValue: "2"
	}
}

def installed() {
	log.debug "Installed with settings: ${settings}"

	initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"

	unsubscribe()
	initialize()
}

def initialize() {
	subscribe(doors, "door", garageDoorState)
	subscribe(arrives, "presence.present", arriveHandler)
	subscribe(leaves, "presence.not present", leaveHandler)
    
}

def arriveHandler(evt)
{
	log.debug "arriveHandler $evt.displayName, $evt.name: $evt.value"
    for(def door in doors) {
    	log.debug("$evt.displayName arrived, opening $door")
    	sendNotificationEvent("$evt.displayName arrived, opening $door")
        door.open()
    }
    switches.on()
	runIn(minutes1*60,turnSwitchesOff)
}

def turnSwitchesOff()
{
	log.debug "turning switches off"
	switches.off()
}

def leaveHandler(evt)
{
	log.debug "leaveHandler $evt.displayName, $evt.name: $evt.value"
    for(def door in doors) {
    	log.debug("$evt.displayName left, closing $door")
    	sendNotificationEvent("$evt.displayName left, closing $door")
        door.close()
    }
	switches.off()
}